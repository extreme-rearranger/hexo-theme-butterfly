- const langPreficesArray = Object.entries(langPrefices)
-
  let algolia = 'undefined';
  if (theme.search.use === 'algolia_search') {
    const { ALGOLIA_APP_ID, ALGOLIA_API_KEY, ALGOLIA_INDEX_NAME } = process.env
    const { appId, applicationID, apiKey, indexName } = config.algolia
    let algolia_language = [];
    langPreficesArray.forEach(([lang, langPrefix]) => {
      algolia_language.push({
        lang: lang,
        input_placeholder: _p(langPrefix+"search.input_placeholder"),
        hits_empty: _p(langPrefix+"search.algolia_search.hits_empty"),
        hits_stats: _p(langPrefix+"search.algolia_search.hits_stats"),
      }) 
    })
    algolia = JSON.stringify({
      appId: ALGOLIA_APP_ID || appId || applicationID,
      apiKey: ALGOLIA_API_KEY || apiKey,
      indexName: ALGOLIA_INDEX_NAME || indexName,
      hitsPerPage: theme.search.algolia_search.hitsPerPage,
      languages: algolia_language
    })
  }

  let localSearch = 'undefined';
  if (theme.search.use === 'local_search') {
    const { CDN, preload, top_n_per_article, unescape } = theme.search.local_search
    let localsearch_language = [];
    langPreficesArray.forEach(([lang, langPrefix]) => {
      localsearch_language.push({
        lang: lang,
        input_placeholder: _p(langPrefix+"search.input_placeholder"),
        hits_empty: _p(langPrefix+"search.local_search.hits_empty"),
        hits_stats: _p(langPrefix+"search.local_search.hits_stats"),
      }) 
    })
    localSearch = JSON.stringify({
      path: CDN || config.root + config.search.path,
      preload,
      top_n_per_article,
      unescape,
      languages: localsearch_language
    })
  }

  let translate = 'undefined';
  if (theme.translate && theme.translate.enable){
    translate = JSON.stringify({
      defaultEncoding: theme.translate.defaultEncoding,
      translateDelay: theme.translate.translateDelay,
      msgToTraditionalChinese: theme.translate.msgToTraditionalChinese,
      msgToSimplifiedChinese: theme.translate.msgToSimplifiedChinese
    })
  }

  let copyright = 'undefined';
  if (theme.copy.enable && theme.copy.copyright.enable){
    let copy_language = [];
    langPreficesArray.forEach(([lang, langPrefix]) => {
      copy_language.push({
        lang: lang,
        author: _p(langPrefix+"copy_copyright.author") + ': ' + config.author,
        link: _p(langPrefix+"copy_copyright.link") + ': ',
        source: _p(langPrefix+"copy_copyright.source") + ': ' + config.title,
        info: _p(langPrefix+"copy_copyright.info")
      }) 
    })
    copyright = JSON.stringify({
      limitCount: theme.copy.copyright.limit_count,
      languages: copy_language
    })
  }

  let Snackbar = 'undefined';
  if (theme.snackbar && theme.snackbar.enable) {
    Snackbar = JSON.stringify({
      chs_to_cht: langPreficesArray.map(([lang, langPrefix]) =>  [lang, _p(langPrefix+"Snackbar.chs_to_cht")]),
      cht_to_chs: langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"Snackbar.cht_to_chs")]),
      day_to_night: langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"Snackbar.day_to_night")]),
      night_to_day: langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"Snackbar.night_to_day")]),
      readmode_on: langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"Snackbar.readmode_on")]),
      bgLight: theme.snackbar.bg_light,
      bgDark: theme.snackbar.bg_dark,
      position: theme.snackbar.position,
    })
  }

  let noticeOutdate = 'undefined';
  if (theme.noticeOutdate && theme.noticeOutdate.enable) {
    noticeOutdate = JSON.stringify({
      limitDay: theme.noticeOutdate.limit_day,
      position: theme.noticeOutdate.position,
      messagePrev: langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"post.notice_outdate.message_prev")]),
      messageNext: langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"post.notice_outdate.message_next")]),
    })
  }

  let highlight = 'undefined'
  let syntaxHighlighter = config.syntax_highlighter
  let highlightEnable = syntaxHighlighter ? ['highlight.js', 'prismjs'].includes(syntaxHighlighter) : (config.highlight.enable || config.prismjs.enable)
  if (highlightEnable) {
    const { copy, language, height_limit, fullpage, macStyle } = theme.code_blocks
    highlight = JSON.stringify({
      plugin: syntaxHighlighter ? syntaxHighlighter : config.highlight.enable ? 'highlight.js' : 'prismjs',
      highlightCopy: copy,
      highlightLang: language,
      highlightHeightLimit: height_limit,
      highlightFullpage: fullpage,
      highlightMacStyle: macStyle
    })
  }

  const copy = JSON.stringify(
    langPreficesArray.map(([lang, langPrefix]) => {
      return {
        lang: lang,
        success: _p(langPrefix+"copy.success"),
        error: _p(langPrefix+"copy.error"),
        noSupport: _p(langPrefix+"copy.noSupport"),
      }
    })
  )

  const runtime = theme.aside.card_webinfo.runtime_date ? 
    JSON.stringify(langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"aside.card_webinfo.runtime.unit")])) : 
    ""

  const date_suffix = JSON.stringify(
    langPreficesArray.map(([lang, langPrefix]) => {
      return {
        lang: lang,
        just: _p(langPrefix+"date_suffix.just"),
        min: _p(langPrefix+"date_suffix.min"),
        hour: _p(langPrefix+"date_suffix.hour"),
        day: _p(langPrefix+"date_suffix.day"),
        month: _p(langPrefix+"date_suffix.month")
      }
    })
  )

script.
  const GLOBAL_CONFIG = {
    root: '!{config.root}',
    algolia: !{algolia},
    localSearch: !{localSearch},
    translate: !{translate},
    noticeOutdate: !{noticeOutdate},
    highlight: !{highlight},
    copy: !{copy},
    relativeDate: {
      homepage: !{theme.post_meta.page.date_format === 'relative'},
      post: !{theme.post_meta.post.date_format === 'relative'}
    },
    runtime: !{runtime},
    dateSuffix: !{date_suffix},
    copyright: !{copyright},
    lightbox: '!{ theme.lightbox || 'null' }',
    Snackbar: !{Snackbar},
    infinitegrid: {
      js: '!{url_for(theme.asset.egjs_infinitegrid)}',
      buttonText: '!{langPreficesArray.map(([lang, langPrefix]) => [lang, _p(langPrefix+"load_more")])}',
    },
    isPhotoFigcaption: !{theme.photofigcaption},
    islazyloadPlugin: !{theme.lazyload.enable && !theme.lazyload.native},
    isAnchor: !{theme.anchor.auto_update || false},
    percent: {
      toc: !{theme.toc.scroll_percent},
      rightside: !{theme.rightside_scroll_percent},
    },
    autoDarkmode: !{theme.darkmode.enable && theme.darkmode.autoChangeMode === 1}
  }
